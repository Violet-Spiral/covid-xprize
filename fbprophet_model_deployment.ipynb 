{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "private_outputs": true,
      "provenance": [],
      "authorship_tag": "ABX9TyOGDvlUonfzbgGGHrbMFmnI"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "rmTDIq_zUEmx"
      },
      "source": [
        "import pandas as pd\r\n",
        "from fbprophet import Prophet\r\n",
        "import os\r\n",
        "from matplotlib.pyplot import savefig\r\n",
        "import argparse\r\n",
        "\r\n",
        "\r\n",
        "def get_simple_covid_data():\r\n",
        "    \"\"\"\r\n",
        "    Download latest confirmed cases and deaths from Oxford by both states and countries.\r\n",
        "    Create new cases and new deaths columns as the running difference in the confirmed cases and deaths, \r\n",
        "    which are cumulative.\r\n",
        "    return resulting dataframe\r\n",
        "    \"\"\"\r\n",
        "    #download latest data from Oxford\r\n",
        "    DATA_URL = 'https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest.csv'\r\n",
        "    df = pd.read_csv(DATA_URL,\r\n",
        "                    parse_dates=['Date'],\r\n",
        "                    encoding=\"ISO-8859-1\",\r\n",
        "                    dtype={\"RegionName\": str},\r\n",
        "                    error_bad_lines=False,\r\n",
        "                    usecols = ['Date','Jurisdiction','RegionName',\r\n",
        "                               'CountryName','ConfirmedCases','ConfirmedDeaths'])\r\n",
        "    \r\n",
        "    #forward fill NaNs in confirmed cases and confirmed deaths columns\r\n",
        "    #if January 1st is NaN, set to 0\r\n",
        "    df.loc[(df.Date == '2020-01-01') & (df['ConfirmedCases'].isna()), 'ConfirmedCases'] = 0\r\n",
        "    df.loc[(df.Date == '2020-01-01') & (df['ConfirmedDeaths'].isna()), 'ConfirmedDeaths'] = 0\r\n",
        "    df[['ConfirmedCases','ConfirmedDeaths']] = df[['ConfirmedCases','ConfirmedDeaths']].fillna(method = 'ffill')\r\n",
        "\r\n",
        "    #add new cases and new deaths columns\r\n",
        "    for state in df[(df['Jurisdiction'] == 'STATE_TOTAL')]['RegionName'].unique():\r\n",
        "        state_inds = (df['Jurisdiction'] == 'STATE_TOTAL') & (df['RegionName'] == state)\r\n",
        "        df.loc[state_inds, 'NewCases'] = df.loc[state_inds, 'ConfirmedCases'].diff().fillna(0)\r\n",
        "        df.loc[state_inds, 'NewDeaths'] = df.loc[state_inds, 'ConfirmedDeaths'].diff().fillna(0)\r\n",
        "\r\n",
        "    for country in df[(df['Jurisdiction'] == 'NAT_TOTAL')]['CountryName'].unique():\r\n",
        "        nat_inds = (df['Jurisdiction'] == 'NAT_TOTAL') & (df['CountryName'] == country)\r\n",
        "        df.loc[nat_inds, 'NewCases'] = df.loc[nat_inds, 'ConfirmedCases'].diff().fillna(0)\r\n",
        "        df.loc[nat_inds, 'NewDeaths'] = df.loc[nat_inds, 'ConfirmedDeaths'].diff().fillna(0)\r\n",
        "        \r\n",
        "    return df\r\n",
        "\r\n",
        "def predict(country='United States', region = None, days_ahead=30, predict='cases', output_folder = None,\r\n",
        "            rolling_mean = True):\r\n",
        "    \r\n",
        "    #retrieve latest covif data\r\n",
        "    df = get_simple_covid_data()\r\n",
        "    \r\n",
        "    #subset df by country and state.  Defaults if no regional info is passed is all of United States\r\n",
        "    df = df[df['CountryName'] == country]\r\n",
        "    if region:\r\n",
        "        df = df[(df['CountryName'] == country)\r\n",
        "        & (df['Jurisdiction'] == 'STATE_TOTAL')\r\n",
        "        & (df['RegionName'] == region)]\r\n",
        "    else: \r\n",
        "        df = df[(df['Jurisdiction'] == 'NAT_TOTAL') & (df['CountryName'] == country)]\r\n",
        "    \r\n",
        "    if predict == 'deaths':\r\n",
        "        df = df[['Date','NewDeaths']].rename(columns = {'Date':'ds','NewDeaths':'y'})\r\n",
        "    else:\r\n",
        "        df = df[['Date','NewCases']].rename(columns = {'Date':'ds','NewCases':'y'})\r\n",
        "\r\n",
        "    #create forecast using Facebook Prophet\r\n",
        "    m = Prophet(seasonality_mode = 'multiplicative',\r\n",
        "                yearly_seasonality = False,\r\n",
        "                daily_seasonality = False,\r\n",
        "                weekly_seasonality = True)\r\n",
        "    m.add_country_holidays(country_name='US')\r\n",
        "    m.fit(df)\r\n",
        "    future = m.make_future_dataframe(periods=days_ahead)\r\n",
        "    forecast = m.predict(future)[['ds','yhat']].tail(days_ahead+7)\r\n",
        "    if rolling_mean:\r\n",
        "        forecast['yhat'] = forecast['yhat'].rolling(window=7).mean()\r\n",
        "    json_forecast = pd.DataFrame(columns = ['date','prediction'])\r\n",
        "    json_forecast['date'] = forecast['ds'].dt.strftime('%m-%d-%Y')\r\n",
        "    json_forecast['prediction'] = forecast['yhat'].round().astype(int)\r\n",
        "\r\n",
        "    #save forecast as JSON\r\n",
        "    if output_folder:\r\n",
        "        os.makedirs(os.path.dirname(output_folder), exist_ok=True)\r\n",
        "    else: \r\n",
        "        output_folder = os.path.dirname(os.path.abspath(__file__))\r\n",
        "\r\n",
        "\r\n",
        "    output_file_path = os.path.join(output_folder,'prediction.json')\r\n",
        "\r\n",
        "\r\n",
        "    json_forecast.to_json(output_file_path, orient='records', index=True)\r\n",
        "\r\n",
        "    #create graph of forecasted cases\r\n",
        "    fig = forecast.plot(x='ds', y='yhat', \r\n",
        "                        ylim = (0,forecast['yhat'].max()*1.1),\r\n",
        "                        xlim = (forecast['ds'].min(),forecast['ds'].max()),\r\n",
        "                        figsize = (10,5),\r\n",
        "                        title = f'Predicted {days_ahead} Day Rolling Average',\r\n",
        "                        xlabel = 'Date', ylabel = predict.title(), grid=True)\r\n",
        "    output_image_path = os.path.join(output_folder,'prediction_graph.png')\r\n",
        "\r\n",
        "    savefig(output_image_path, dpi=200)\r\n",
        "    return forecast\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7-A1DrlkUGKB"
      },
      "source": [
        "forecast = predict(days_ahead = 90, rolling_mean = False,\r\n",
        "                   output_folder = '/content')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6j2SIhkxUKno"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}